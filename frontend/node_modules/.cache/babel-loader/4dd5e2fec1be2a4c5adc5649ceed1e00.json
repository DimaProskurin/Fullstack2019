{"ast":null,"code":"var _jsxFileName = \"/Users/proskurin-d/fullstack2019/frontend/src/views/compensationList/index.jsx\";\nimport React from 'react';\nimport { List } from \"../../components/compensations/list\";\nimport { ItemList } from \"../../components/compensations/itemList\";\nimport './styles.css';\nimport '../main/styles.css';\nimport { fetchCompensations } from \"../../actions\";\nimport { connect } from \"react-redux\";\nimport { getCompensations } from \"../../utils\";\nimport { stringToArray } from \"../../utils\";\nexport class CompensationList extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    if (this.props.compensationList.length === 0) {\n      getCompensations().then(compensations => this.props.fetchCompensations(compensations));\n    }\n  }\n\n  render() {\n    if (this.props.compensationList.length !== 0) {\n      return React.createElement(\"div\", {\n        className: \"Block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, React.createElement(List, {\n        items: this.props.compensationList.filter(compensation => compensation.category_url === this.props.categoryUrl).map((compensation, index) => React.createElement(ItemList, {\n          categoryUrl: this.props.categoryUrl,\n          id: compensation.url,\n          title: compensation.name,\n          money: stringToArray(compensation.money),\n          documents: stringToArray(compensation.requirements),\n          addInfo: stringToArray(compensation.additional_info),\n          isOnce: compensation.once_a_term,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        })),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }));\n    } else {\n      alert('adsfasdfsdf');\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"App-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"spinner-border\",\n        style: {\n          width: \"5rem\",\n          height: \"5rem\",\n          role: \"status\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"sr-only\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"Loading...\"))));\n    }\n  }\n\n}\nCompensationList.propTypes = {\n  categoryUrl: String\n};\nCompensationList.defaultProps = {\n  categoryUrl: \"default\"\n};\n\nlet mapStateToProps = state => {\n  return {\n    compensationList: state.fetch.compensations\n  };\n};\n\nconst mapDispatchToProps = {\n  fetchCompensations\n};\nCompensationList = connect(mapStateToProps, mapDispatchToProps)(CompensationList);\nexport default CompensationList;","map":{"version":3,"sources":["/Users/proskurin-d/fullstack2019/frontend/src/views/compensationList/index.jsx"],"names":["React","List","ItemList","fetchCompensations","connect","getCompensations","stringToArray","CompensationList","Component","constructor","props","componentDidMount","compensationList","length","then","compensations","render","filter","compensation","category_url","categoryUrl","map","index","url","name","money","requirements","additional_info","once_a_term","alert","width","height","role","propTypes","String","defaultProps","mapStateToProps","state","fetch","mapDispatchToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,IAAR,QAAmB,qCAAnB;AACA,SAAQC,QAAR,QAAuB,yCAAvB;AACA,OAAO,cAAP;AACA,OAAO,oBAAP;AACA,SAAQC,kBAAR,QAAiC,eAAjC;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,gBAAR,QAA+B,aAA/B;AACA,SAAQC,aAAR,QAA4B,aAA5B;AAGA,OAAO,MAAMC,gBAAN,SAA+BP,KAAK,CAACQ,SAArC,CAA+C;AAClDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,QAAI,KAAKD,KAAL,CAAWE,gBAAX,CAA4BC,MAA5B,KAAuC,CAA3C,EAA8C;AAC1CR,MAAAA,gBAAgB,GAAGS,IAAnB,CAAyBC,aAAD,IAAmB,KAAKL,KAAL,CAAWP,kBAAX,CAA8BY,aAA9B,CAA3C;AACH;AACJ;;AAEDC,EAAAA,MAAM,GAAG;AACL,QAAI,KAAKN,KAAL,CAAWE,gBAAX,CAA4BC,MAA5B,KAAuC,CAA3C,EAA8C;AAC1C,aACI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EACP,KAAKH,KAAL,CAAWE,gBAAX,CACKK,MADL,CACYC,YAAY,IAAIA,YAAY,CAACC,YAAb,KAA8B,KAAKT,KAAL,CAAWU,WADrE,EAEKC,GAFL,CAES,CAACH,YAAD,EAAeI,KAAf,KACJ,oBAAC,QAAD;AAAU,UAAA,WAAW,EAAG,KAAKZ,KAAL,CAAWU,WAAnC;AACU,UAAA,EAAE,EAAGF,YAAY,CAACK,GAD5B;AAEU,UAAA,KAAK,EAAEL,YAAY,CAACM,IAF9B;AAGU,UAAA,KAAK,EAAGlB,aAAa,CAACY,YAAY,CAACO,KAAd,CAH/B;AAIU,UAAA,SAAS,EAAGnB,aAAa,CAACY,YAAY,CAACQ,YAAd,CAJnC;AAKU,UAAA,OAAO,EAAGpB,aAAa,CAACY,YAAY,CAACS,eAAd,CALjC;AAMU,UAAA,MAAM,EAAET,YAAY,CAACU,WAN/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAHL,CADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ;AAiBH,KAlBD,MAkBO;AACHC,MAAAA,KAAK,CAAC,aAAD,CAAL;AACA,aACI;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAQ,QAAA,SAAS,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAgC,QAAA,KAAK,EAAE;AAACC,UAAAA,KAAK,EAAE,MAAR;AAAgBC,UAAAA,MAAM,EAAE,MAAxB;AAAgCC,UAAAA,IAAI,EAAE;AAAtC,SAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAM,QAAA,SAAS,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,CADJ,CADJ,CADJ;AASH;AACJ;;AA1CiD;AA6CtDzB,gBAAgB,CAAC0B,SAAjB,GAA6B;AACzBb,EAAAA,WAAW,EAAEc;AADY,CAA7B;AAIA3B,gBAAgB,CAAC4B,YAAjB,GAAgC;AAC5Bf,EAAAA,WAAW,EAAE;AADe,CAAhC;;AAIA,IAAIgB,eAAe,GAAIC,KAAD,IAAW;AAC7B,SAAO;AACHzB,IAAAA,gBAAgB,EAAEyB,KAAK,CAACC,KAAN,CAAYvB;AAD3B,GAAP;AAGH,CAJD;;AAMA,MAAMwB,kBAAkB,GAAG;AACvBpC,EAAAA;AADuB,CAA3B;AAIAI,gBAAgB,GAAGH,OAAO,CAACgC,eAAD,EAAkBG,kBAAlB,CAAP,CAA6ChC,gBAA7C,CAAnB;AAEA,eAAeA,gBAAf","sourcesContent":["import React from 'react';\nimport {List} from \"../../components/compensations/list\";\nimport {ItemList} from \"../../components/compensations/itemList\";\nimport './styles.css'\nimport '../main/styles.css'\nimport {fetchCompensations} from \"../../actions\";\nimport {connect} from \"react-redux\";\nimport {getCompensations} from \"../../utils\";\nimport {stringToArray} from \"../../utils\";\n\n\nexport class CompensationList extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount() {\n        if (this.props.compensationList.length === 0) {\n            getCompensations().then((compensations) => this.props.fetchCompensations(compensations));\n        }\n    }\n\n    render() {\n        if (this.props.compensationList.length !== 0) {\n            return (\n                <div className=\"Block\">\n                    <List items={\n                        this.props.compensationList\n                            .filter(compensation => compensation.category_url === this.props.categoryUrl)\n                            .map((compensation, index) =>\n                            (<ItemList categoryUrl={ this.props.categoryUrl }\n                                       id={ compensation.url }\n                                       title={compensation.name}\n                                       money={ stringToArray(compensation.money) }\n                                       documents={ stringToArray(compensation.requirements) }\n                                       addInfo={ stringToArray(compensation.additional_info) }\n                                       isOnce={compensation.once_a_term}\n                            />))\n                    }/>\n                </div>\n            );\n        } else {\n            alert('adsfasdfsdf');\n            return(\n                <div className=\"App\">\n                    <header className=\"App-header\">\n                        <div className=\"spinner-border\" style={{width: \"5rem\", height: \"5rem\", role: \"status\"}}>\n                            <span className=\"sr-only\">Loading...</span>\n                        </div>\n                    </header>\n                </div>\n            );\n        }\n    }\n}\n\nCompensationList.propTypes = {\n    categoryUrl: String,\n};\n\nCompensationList.defaultProps = {\n    categoryUrl: \"default\"\n};\n\nlet mapStateToProps = (state) => {\n    return {\n        compensationList: state.fetch.compensations\n    };\n};\n\nconst mapDispatchToProps = {\n    fetchCompensations\n};\n\nCompensationList = connect(mapStateToProps, mapDispatchToProps)(CompensationList);\n\nexport default CompensationList;\n"]},"metadata":{},"sourceType":"module"}