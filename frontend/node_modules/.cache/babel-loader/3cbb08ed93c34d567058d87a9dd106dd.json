{"ast":null,"code":"var _jsxFileName = \"/Users/proskurin-d/fullstack2019/frontend/src/routes.jsx\";\nimport React, { Component } from 'react';\nimport { Route, Switch, withRouter } from 'react-router';\nimport App from \"./views/main/index\";\nimport HistoryMain from \"./views/history\";\nimport { CompensationList } from \"./views/compensationList\";\nimport { Generator } from \"./views/generator\";\nimport { fetchCategories } from \"./actions\";\nimport { fetchCompensations } from \"./actions\";\nimport { connect } from \"react-redux\";\nimport { getCategoriesFromDB, getCompensations } from \"./utils\";\nexport class MainRouter extends Component {\n  componentDidMount() {\n    if (this.props.categoryList.length === 0 || this.props.compensationList.length === 0) {\n      getCategoriesFromDB().then(categories => this.props.fetchCategories(categories));\n      getCompensations().then(compensations => this.props.fetchCompensations(compensations));\n    }\n  }\n\n  render() {\n    return this.props.compensationList.length === 0 ? React.createElement(Route, {\n      path: '/',\n      component: App,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }) : React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      component: App,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/history\",\n      component: HistoryMain,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }), this.props.categoryList.map((category, index) => React.createElement(Route, {\n      exact: true,\n      path: '/' + category.url,\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(CompensationList, {\n      categoryUrl: category.url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }))), this.props.compensationList.map((compensation, index) => React.createElement(Route, {\n      exact: true,\n      path: '/' + compensation.category_url + '/' + compensation.url,\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(Generator, {\n      compensationUrl: compensation.url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nlet mapStateToProps = state => {\n  return {\n    categoryList: state.fetch.categories,\n    compensationList: state.fetch.compensations\n  };\n};\n\nconst mapDispatchToProps = {\n  fetchCategories,\n  fetchCompensations\n};\nMainRouter = connect(mapStateToProps, mapDispatchToProps)(MainRouter);\nexport default withRouter(MainRouter);","map":{"version":3,"sources":["/Users/proskurin-d/fullstack2019/frontend/src/routes.jsx"],"names":["React","Component","Route","Switch","withRouter","App","HistoryMain","CompensationList","Generator","fetchCategories","fetchCompensations","connect","getCategoriesFromDB","getCompensations","MainRouter","componentDidMount","props","categoryList","length","compensationList","then","categories","compensations","render","map","category","index","url","compensation","category_url","mapStateToProps","state","fetch","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { Route, Switch, withRouter } from 'react-router';\nimport App from \"./views/main/index\";\nimport HistoryMain from \"./views/history\";\nimport {CompensationList} from \"./views/compensationList\";\nimport {Generator} from \"./views/generator\";\nimport {fetchCategories} from \"./actions\";\nimport {fetchCompensations} from \"./actions\";\nimport {connect} from \"react-redux\";\nimport {getCategoriesFromDB, getCompensations} from \"./utils\";\n\n\nexport class MainRouter extends Component {\n    \n    componentDidMount() {\n        if (this.props.categoryList.length === 0 || this.props.compensationList.length === 0) {\n            getCategoriesFromDB().then((categories) => this.props.fetchCategories(categories));\n            getCompensations().then((compensations) => this.props.fetchCompensations(compensations));\n        }\n    }\n\n    render() {\n        return (\n            (this.props.compensationList.length === 0 ? (\n                <Route path={'/'} component={App} />\n            ) : (\n                <Switch>\n                    <Route exact path='/' component={App}/>\n\n                    <Route exact path='/history' component={HistoryMain}/>\n\n                    {\n                        this.props.categoryList.map((category, index) => (\n                                <Route exact path={'/' + category.url} key={index}>\n                                    <CompensationList categoryUrl={category.url}/>\n                                </Route>\n                            )\n                        )\n                    }\n\n                    {\n                        this.props.compensationList.map((compensation, index) => (\n                                <Route exact path={'/' + compensation.category_url + '/' + compensation.url} key={index}>\n                                    <Generator compensationUrl={compensation.url}/>\n                                </Route>\n                            )\n                        )\n                    }\n\n                </Switch>\n            ))\n        );\n    }\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        categoryList: state.fetch.categories,\n        compensationList: state.fetch.compensations\n    };\n};\n\nconst mapDispatchToProps = {\n    fetchCategories,\n    fetchCompensations,\n};\n\nMainRouter = connect(mapStateToProps, mapDispatchToProps)(MainRouter);\n\nexport default withRouter(MainRouter);\n"]},"metadata":{},"sourceType":"module"}