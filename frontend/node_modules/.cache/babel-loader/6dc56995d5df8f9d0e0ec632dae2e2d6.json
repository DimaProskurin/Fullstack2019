{"ast":null,"code":"var _jsxFileName = \"/Users/proskurin-d/fullstack2019/frontend/src/views/compensationList/index.jsx\";\nimport React from 'react';\nimport { List } from \"../../components/compensations/list\";\nimport { ItemList } from \"../../components/compensations/itemList\";\nimport './styles.css';\nimport { Avatar } from \"../../components/main/avatar\";\nimport { getCategoriesFromDB, getCompensations } from \"../../utils\";\nimport { fetchCompensations } from \"../../actions\";\nimport { fetchCategories } from \"../../actions\";\nimport { connect } from \"react-redux\";\nimport { App } from \"../main\";\n\nfunction stringToArray(string) {\n  if (string === '') return [];\n  return string.split('\\n');\n}\n\nexport class CompensationList extends React.Component {\n  constructor(props) {\n    super(props); // getCompensations().then((compensations) => this.props.fetchCategories(compensations));\n  }\n\n  componentDidMount() {} // Получение данных для всех ItemList должно приходить через БД из таблицы с этими компенсациями\n\n\n  render() {\n    if (false) {\n      return React.createElement(\"div\", {\n        className: \"Block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, React.createElement(List, {\n        items: this.props.compensationList.map((compensation, index) => React.createElement(ItemList, {\n          category: this.props.category,\n          id: compensation.url,\n          title: compensation.name,\n          money: stringToArray(compensation.money),\n          documents: stringToArray(compensation.requirements),\n          addInfo: stringToArray(compensation.additional_info),\n          isOnce: compensation.once_a_term,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        })),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }));\n    } else {\n      return React.createElement(\"div\", {\n        className: \"spinner-border\",\n        style: {\n          width: \"5rem\",\n          height: \"5rem\",\n          role: \"status\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"sr-only\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, \"Loading...\"));\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    compensationList: state.fetch.compensations\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchCompensations: () => {\n      dispatch(fetchCompensations());\n    }\n  };\n}; // export const ToDoList = connect(\n//     store => ({\n//         todo: store.todo,\n//     }),\n//     dispatch => ({\n//\n//         // export const addTodoItem = item => ({\n//         //     type: ADD_TODO_ITEM,\n//         //     payload: { item }\n//         // });\n//\n//         addTodoItem2(item) {\n//             dispatch(addTodoItem(item));\n//         },\n//         removeTodoItem(id) {\n//             dispatch(removeTodoItem(id));\n//         }\n//     })\n// )(_ToDoList);\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CompensationList);\nCompensationList.propTypes = {\n  category: String\n};\nCompensationList.defaultProps = {\n  category: \"default\"\n};","map":{"version":3,"sources":["/Users/proskurin-d/fullstack2019/frontend/src/views/compensationList/index.jsx"],"names":["React","List","ItemList","Avatar","getCategoriesFromDB","getCompensations","fetchCompensations","fetchCategories","connect","App","stringToArray","string","split","CompensationList","Component","constructor","props","componentDidMount","render","compensationList","map","compensation","index","category","url","name","money","requirements","additional_info","once_a_term","width","height","role","mapStateToProps","state","fetch","compensations","mapDispatchToProps","dispatch","propTypes","String","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {List} from \"../../components/compensations/list\";\nimport {ItemList} from \"../../components/compensations/itemList\";\nimport './styles.css'\nimport {Avatar} from \"../../components/main/avatar\";\nimport {getCategoriesFromDB, getCompensations} from \"../../utils\";\nimport {fetchCompensations} from \"../../actions\";\nimport {fetchCategories} from \"../../actions\";\nimport {connect} from \"react-redux\";\nimport {App} from \"../main\";\n\nfunction stringToArray(string) {\n    if (string === '')\n        return  [];\n    return string.split('\\n');\n}\n\nexport class CompensationList extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // getCompensations().then((compensations) => this.props.fetchCategories(compensations));\n    }\n\n    componentDidMount() {\n    }\n\n    // Получение данных для всех ItemList должно приходить через БД из таблицы с этими компенсациями\n    render() {\n        if (false) {\n            return (\n                <div className=\"Block\">\n                    <List items={\n                        this.props.compensationList.map((compensation, index) =>\n                            (<ItemList category={ this.props.category }\n                                       id={ compensation.url }\n                                       title={compensation.name}\n                                       money={ stringToArray(compensation.money) }\n                                       documents={ stringToArray(compensation.requirements) }\n                                       addInfo={ stringToArray(compensation.additional_info) }\n                                       isOnce={compensation.once_a_term}\n                            />))\n                    }/>\n                </div>\n            );\n        } else {\n            return(\n                <div className=\"spinner-border\" style={{width: \"5rem\", height: \"5rem\", role: \"status\"}}>\n                    <span className=\"sr-only\">Loading...</span>\n                </div>\n            );\n        }\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        compensationList: state.fetch.compensations\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        fetchCompensations: () => {\n            dispatch(fetchCompensations());\n        }\n    }\n};\n\n// export const ToDoList = connect(\n//     store => ({\n//         todo: store.todo,\n//     }),\n//     dispatch => ({\n//\n//         // export const addTodoItem = item => ({\n//         //     type: ADD_TODO_ITEM,\n//         //     payload: { item }\n//         // });\n//\n//         addTodoItem2(item) {\n//             dispatch(addTodoItem(item));\n//         },\n//         removeTodoItem(id) {\n//             dispatch(removeTodoItem(id));\n//         }\n//     })\n// )(_ToDoList);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CompensationList);\n\nCompensationList.propTypes = {\n    category: String,\n};\n\nCompensationList.defaultProps = {\n    category: \"default\"\n};\n\n\n"]},"metadata":{},"sourceType":"module"}